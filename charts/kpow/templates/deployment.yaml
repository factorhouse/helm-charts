apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "kpow.fullname" . }}
  namespace: "{{ .Release.Namespace }}"
  labels:
    {{- include "kpow.labels" . | nindent 4 }}
    {{- include "kpow.providedLabels" . | nindent 4 }}
spec:
{{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
{{- end }}
  selector:
    matchLabels:
      {{- include "kpow.selectorLabels" . | nindent 6 }}
  template:
    metadata:
    {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      labels:
        {{- include "kpow.selectorLabels" . | nindent 8 }}
        {{- include "kpow.providedLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "kpow.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.env }}
          env:
            {{- range $key, $val := . }}
            - name: {{ $key }}
              value: {{ $val | quote }}
            {{- end }}
          {{- end }}
          envFrom:
            {{- with .Values.envFromConfigMap }}
            - configMapRef:
                name: {{ . }}
            {{- end }}
            {{- with .Values.envFromSecret }}
            - secretRef:
                name: {{ . }}
            {{- end }}
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          {{- if or .Values.volumeMounts .Values.ephemeralTmp.enabled }}
          volumeMounts:
            {{- if .Values.volumeMounts }}
              {{- toYaml .Values.volumeMounts | nindent 12 }}
            {{- end }}
            {{- if .Values.ephemeralTmp.enabled }}
            - name: {{ .Values.ephemeralTmp.volumeMount.name | quote }}
              mountPath: {{ .Values.ephemeralTmp.volumeMount.mountPath | quote }}
            {{- end }}
          {{- end }}
          readinessProbe:
            httpGet:
              path: /up
              port: http
            initialDelaySeconds: 90
            periodSeconds: 30
          livenessProbe:
            httpGet:
              path: /healthy
              port: http
            initialDelaySeconds: 120
            periodSeconds: 30
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if or .Values.volumes .Values.ephemeralTmp.enabled }}
      volumes:
        {{- if .Values.volumes }}
          {{- toYaml .Values.volumes | nindent 8 }}
        {{- end }}
        {{- if .Values.ephemeralTmp.enabled }}
        - name: {{ .Values.ephemeralTmp.volumeMount.name | quote }}
          {{- /* Check if emptyDir config exists, otherwise provide a default empty one */}}
          {{- if .Values.ephemeralTmp.volume.emptyDir }}
          emptyDir:
            {{- toYaml .Values.ephemeralTmp.volume.emptyDir | nindent 12 }}
          {{- else }}
          emptyDir: {} # Default emptyDir if no specific config
          {{- end }}
        {{- end }}
      {{- end }}
